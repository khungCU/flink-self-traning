/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.0.0/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven {
        url "https://packages.confluent.io/maven"
    }

}

ext {
        flinkVersion = '1.18.0'
        log4jVersion = '2.12.1'
        junitVersion = '4.13'
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter
    testImplementation 'org.assertj:assertj-core:3.24.2'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    

    // This dependency is used by the application.
    implementation libs.guava

    implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"

    implementation "org.apache.flink:flink-clients:${flinkVersion}"
    implementation "org.apache.flink:flink-java:${flinkVersion}"
    implementation "org.apache.flink:flink-streaming-java:${flinkVersion}"
    implementation "org.apache.flink:flink-connector-datagen:${flinkVersion}"

    // allows using Flink's web UI when running in the IDE:
    implementation "org.apache.flink:flink-runtime-web:${flinkVersion}"
    // allows using Flink's harness test
    testImplementation "org.apache.flink:flink-test-utils:${flinkVersion}"

    // dependecies for kafka client
    implementation group: 'org.slf4j', name: 'slf4j-nop', version: '2.0.3'
    implementation group: 'org.apache.kafka', name: 'kafka-clients', version: '3.3.1'
    // needed if OAuth is used; otherwise this can be left out.
    // See: https://docs.confluent.io/platform/current/kafka/authentication_sasl/authentication_sasl_oauth.html
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.15.2'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'flink.self.traning.statefulTransformation.EnrichmentSimpleApp'
    applicationDefaultJvmArgs = [
        '--add-opens=java.base/java.lang=ALL-UNNAMED',
        '--add-opens=java.base/java.util=ALL-UNNAMED'
    ]
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    jvmArgs = [
        '--add-opens=java.base/java.lang=ALL-UNNAMED',
        '--add-opens=java.base/java.util=ALL-UNNAMED'
    ]
}

// Create an executable JAR for the Kafka ProducerApp
task producerJar(type: Jar) {
    archiveBaseName = 'kafka-producer'
    archiveVersion = '1.0.0'

    manifest {
        attributes(
            'Main-Class': 'flink.self.traning.kafkaClient.ProducerApp'
        )
    }

    // Include all dependencies in the JAR (fat JAR)
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // Include the compiled classes
    with jar

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
