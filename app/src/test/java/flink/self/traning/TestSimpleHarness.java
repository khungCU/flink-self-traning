/*
 * This source file was generated by the Gradle 'init' task
 */
package flink.self.traning;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterEach;

import flink.self.traning.flinkHarnessesTest.SingleOutputMapFunc;

import static org.assertj.core.api.Assertions.assertThat;

import org.apache.flink.streaming.api.operators.StreamMap;
import org.apache.flink.streaming.util.OneInputStreamOperatorTestHarness;

import java.util.List;

class TestSimpleHarness {
    private SingleOutputMapFunc singleOutputMapFunc;
    private OneInputStreamOperatorTestHarness<String, String> testHarness; // Make it a class field

    @BeforeEach
    public void setUp() throws Exception {

        // instantiate user-defined function
        singleOutputMapFunc = new SingleOutputMapFunc();

        // wrap user defined function into the corresponding operator
        testHarness = new OneInputStreamOperatorTestHarness<>(new StreamMap<>(singleOutputMapFunc));

        // open the test harness (will also call open() on RichFunctions)
        testHarness.open();
    }


    @Test
    public void testUppercaseTransformation() throws Exception {

        // push (timestamped) elements into the operator (and hence user defined function)
        testHarness.processElement("ken", 1000L);
        testHarness.processElement("alex", 2000L);
        testHarness.processElement("joe", 3000L);

        // retrieve list of emitted records for assertions
        List<String> output = testHarness.extractOutputValues();
        assertThat(output).containsExactly("KEN", "ALEX", "JOE");
    }

    @AfterEach
    public void tearDown() throws Exception {
        testHarness.close();
    }
}
