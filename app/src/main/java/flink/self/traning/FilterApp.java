/*
 * This source file was generated by the Gradle 'init' task
 */
package flink.self.traning;

import java.util.Collection;
import java.util.List;

import org.apache.flink.api.common.functions.FilterFunction;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;

import flink.self.traning.models.*;
import flink.self.traning.utils.FilterVip;

/*
 * This lab is to try different methods using filter to filter the stream
 */
public class FilterApp {
   
    public static void main(String[] args) throws Exception{
        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
        Collection<Client> dummyClient = List.of(
                new Client(1, "Ken", "male", true),
                new Client(2, "Joe", "male", true),
                new Client(3, "Alex", "female", true),
                new Client(4, "Kate", "female", false)
        );

        // DataStream<Client> s = env.fromElements(
        //         new Client(1, "Ken", "male", true),
        //         new Client(2, "Joe", "male", true),
        //         new Client(3, "Alex", "female", true),
        //         new Client(4, "Kate", "female", false)
        // );
        DataStream<Client> s = env.fromCollection(dummyClient);

        // filter only vip (lambda)
        // DataStream<Client> res = s.filter(in -> in.getVip() == true);

        // filter only vip (anonymous class)
        // DataStream<Client> res = s.filter(new FilterFunction<Client>() {
        //     @Override
        //     public boolean filter(Client value) throws Exception {
        //        return  value.getVip() == true;
        //     };    
        // }   
        // );

        // filter only vip custom class
        DataStream<Client> res =  s.filter(new FilterVip());

        res.print();

        env.execute();
    }  
}